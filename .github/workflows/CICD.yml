name: CICD

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test --parallel --build-cache --daemon --configure-on-demand

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/backend_server .

      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend_server:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set target IP
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" -H "X-DEPLOY-TOKEN: ${{ secrets.DEPLOY_SECRET_TOKEN }}" "http://${{ secrets.BACKEND_SERVER_IP }}/env")
          echo "HTTP STATUS: $STATUS"
          
          if [ "$STATUS" = "200" ]; then
            CURRENT_UPSTREAM=$(curl -s -H "X-DEPLOY-TOKEN: ${{ secrets.DEPLOY_SECRET_TOKEN }}" "http://${{ secrets.BACKEND_SERVER_IP }}/env")
          else
            CURRENT_UPSTREAM=green
          fi
          
          echo "CURRENT_UPSTREAM=$CURRENT_UPSTREAM" >> $GITHUB_ENV
          
          if [ "$CURRENT_UPSTREAM" = "blue" ]; then
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          else
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          fi
          
      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@v0.1.10
        with:
          username: ubuntu
          host: ${{ secrets.BACKEND_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/backend_server:latest
            sudo docker-compose -f docker-compose-${{env.TARGET_UPSTREAM}}.yml up -d

      - name: Check deploy server URL
        uses: jtalk/url-health-check-action@v4
        with:
          url: http://${{ secrets.BACKEND_SERVER_IP }}:${{env.STOPPED_PORT}}/env
          headers: '{"X-DEPLOY-TOKEN": "${{ secrets.DEPLOY_SECRET_TOKEN }}"}'
          max-attempts: 5
          retry-delay: 10s

      - name: Change nginx upstream
        uses: appleboy/ssh-action@v0.1.10
        with:
          username: ubuntu
          host: ${{ secrets.BACKEND_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload' 

      - name: Stop current server
        uses: appleboy/ssh-action@v0.1.10
        with:
          username: ubuntu
          host: ${{ secrets.BACKEND_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker system prune -f
